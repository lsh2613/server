name: CD

on:
  push:
    branches: [ "dev" ]
    
env:
  AWS_REGION: ap-northeast-2                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: pitchain                   # set this to your Amazon ECR repository name
  ECS_SERVICE: pitchain-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: pitchain-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: pitchain-task-definition.json  # Task Definition의 파일 이름
  CONTAINER_NAME: pitchain-cont           # set this to the name of the container in the
  
permissions:
  id-token: write
  contents: read

jobs:
  CD:
    runs-on: ubuntu-latest
    steps:
    - name: 1. checkout
      uses: actions/checkout@v4

    - name: 2. Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 3. Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: 4. Copy application.yml
      env:
        CREATE_SECRET: ${{ secrets.APPLICATION_YML }}
        CREATE_SECRET_DIR: src/main/resources
        CREATE_SECRET_DIR_FILE_NAME: application.yml
      run: |
        mkdir -p $CREATE_SECRET_DIR
        echo -n "$CREATE_SECRET" | base64 --decode > $CREATE_SECRET_DIR/$CREATE_SECRET_DIR_FILE_NAME

    - name: 5. Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: 6. Build with Gradle, without test
      run: ./gradlew clean build -x test
      
    - name: 7. Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::491085415955:role/pitchain-gitactions-role
        aws-region: ap-northeast-2

    - name: 8. Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: 9. Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: 10. Copy Task Definition JSON
      run: |
        echo '${{ secrets.TASK_DEFINITION_JSON }}' > ${{ env.ECS_TASK_DEFINITION }}

    - name: 11. Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: 12. Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
